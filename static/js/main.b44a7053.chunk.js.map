{"version":3,"sources":["components/weather.component.jsx","components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_farhenheit","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","farhenheit","calFarhenheit","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","celsius","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeID","this","Math","floor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b44a7053.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Weather = (props) => {\r\n  return (\r\n    <div className=\"container text-light\">\r\n      <div className=\"cards pt-4\">\r\n        <h1>{props.city}</h1>\r\n        <h5 className=\"py-4\">\r\n          <i className={`wi ${props.weatherIcon} display-1`} />\r\n        </h5>\r\n        {props.temp_farhenheit ? (\r\n          <h1 className=\"py-2\">{props.temp_farhenheit}&deg;</h1>\r\n        ) : null}\r\n\r\n        {/*show max and min temp */}\r\n        {minmaxTemp(props.temp_min, props.temp_max)}\r\n\r\n        <h4 className=\"py-3\">{props.description}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction minmaxTemp(min, max) {\r\n  if (min && max) {\r\n    return (\r\n      <h3>\r\n        <span className=\"px-4\">{min}&deg;</span>\r\n        <span className=\"px-4\">{max}&deg;</span>\r\n      </h3>\r\n    );\r\n  }\r\n}\r\nexport default Weather;\r\n","import React from \"react\";\r\nimport \"../css/form.style.css\";\r\nconst Form = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div>{props.error ? error() : null}</div>\r\n      <form onSubmit={props.loadweather}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3 offset-md-2\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"city\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"City\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              name=\"country\"\r\n              autoComplete=\"off\"\r\n              placeholder=\"Country\"\r\n            />\r\n          </div>\r\n          <div className=\"col-md-3 mt-md-0 py-2 text-md-left\">\r\n            <button className=\"btn btn-primary\">Get Weather</button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction error() {\r\n  return (\r\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n      Please Enter City and Country\r\n    </div>\r\n  );\r\n}\r\nexport default Form;\r\n","\r\nimport React from 'react';\r\n\r\nimport './App.css';\r\nimport './css/weather-icons.min.css';\r\nimport './css/bootstrap.min.css';\r\nimport Weather from './components/weather.component';\r\nimport Form from './components/form.component.jsx'\r\n\r\n\r\nconst API_key = \"3c4b4a4758aef4aef45036a83dcf6281\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      city: undefined,\r\n      country: undefined,\r\n      icon: undefined,\r\n      main: undefined,\r\n      celsius: undefined,\r\n      temp_max: undefined,\r\n      temp_min: undefined,\r\n      description: \"\",\r\n      error: false\r\n\r\n    };\r\n\r\n\r\n    this.weatherIcon = {\r\n      Thunderstorm: \"wi-thunderstorm\",\r\n      Drizzle: \"wi-sleet\",\r\n      Rain: \"wi-storm-showers\",\r\n      Snow: \"wi-snow\",\r\n      Atmosphere: \"wi-fog\",\r\n      Clear: \"wi-day-sunny\",\r\n      Clouds: \"wi-day-fog\"\r\n\r\n    };\r\n  }\r\n\r\n  get_WeatherIcon(icons, rangeID) {\r\n    switch (true) {\r\n      case rangeID >= 200 && rangeID <= 299:\r\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\r\n        break;\r\n      case rangeID >= 300 && rangeID <= 499:\r\n        this.setState({ icon: this.weatherIcon.Drizzle });\r\n        break;\r\n      case rangeID >= 500 && rangeID <= 599:\r\n        this.setState({ icon: this.weatherIcon.Rain });\r\n        break;\r\n      case rangeID >= 600 && rangeID <= 699:\r\n        this.setState({ icon: this.weatherIcon.Snow });\r\n        break;\r\n      case rangeID >= 700 && rangeID <= 799:\r\n        this.setState({ icon: this.weatherIcon.Atmosphere });\r\n        break;\r\n      case rangeID === 800:\r\n        this.setState({ icon: this.weatherIcon.Clear });\r\n        break;\r\n      case rangeID >= 801 && rangeID <= 804:\r\n        this.setState({ icon: this.weatherIcon.Clouds });\r\n        break;\r\n      default:\r\n        this.setState({ icon: this.weatherIcon.Clouds });\r\n    }\r\n  }\r\n\r\n  calFarhenheit(temp) {\r\n    let farh = Math.floor((temp-273.15) * 9 / 5 + 32);\r\n    return farh;\r\n  }\r\n\r\n  getWeather = async (e) => {\r\n\r\n    e.preventDefault();\r\n\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n\r\n    if (city && country) {\r\n\r\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`)\r\n      const response = await api_call.json();\r\n\r\n      console.log(response);\r\n      \r\n\r\n      this.setState({\r\n        city: `${response.name},${response.sys.country}`,\r\n        farhenheit: this.calFarhenheit(response.main.temp),\r\n        temp_max: this.calFarhenheit(response.main.temp_max),\r\n        temp_min:this.calFarhenheit(response.main.temp_min),\r\n        description: response.weather[0].description,\r\n        error: false\r\n      });\r\n\r\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\r\n\r\n    } else {\r\n      this.setState({ error: true });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Form loadweather={this.getWeather} error={this.state.error} />\r\n        <Weather\r\n          city={this.state.city}\r\n          country={this.state.country}\r\n          temp_farhenheit={this.state.farhenheit}\r\n          temp_max={this.state.temp_max}\r\n          temp_min={this.state.temp_min}\r\n          description={this.state.description}\r\n          weatherIcon={this.state.icon}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n};\r\n\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}